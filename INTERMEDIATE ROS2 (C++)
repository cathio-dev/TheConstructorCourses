//-- 1.1 --//
  Welcome to the Intermediate ROS 2 course!

In this course, you will explore key concepts that improve execution, communication, and configuration in ROS 2, enabling you to develop more efficient and scalable robotic applications. You'll dive into topics such as launch files, node parameters, threading, callback management, Quality of Service (QoS), Data Distribution Service (DDS), and managed nodes, all of which are essential for optimizing real-world robotic systems.

By the end of this course, youâ€™ll be equipped to work with advanced ROS 2 functionalities, making your robotic solutions more robust and adaptable.

//-- 1.3 --//
  What I will learn:
    How to create different types of launch files in ROS 2
    Working with parameters to configure ROS 2 nodes
    Threading in ROS 2 for managing concurrent tasks
    Callback management for efficient message handling
    Understanding Quality of Service (QoS) and its impact on communication
    Exploring Data Distribution Service (DDS) in ROS 2
    Implementing and managing Managed Nodes in ROS 2

//-- 2.2 --//

  message_info = launch.actions.LogInfo(
        msg=str(rviz_config_dir))

...


return LaunchDescription(
        [
            ...,
            message_info
        ]
    )
LogInfo, allows you to post a message inside the ROS2 logging system from a launch file.

In this case, the message to be printed is the full path to the Rviz config file. This can be useful to check if we are loading the proper config file.

In order to print a message during launch time:

you create a LogInfo variable, with argument (msg='the string message you want to print').
then you provide that variable to the LaunchDescription.
===============================================================
name_of_launch_object = IncludeLaunchDescription(
        PythonLaunchDescriptionSource(MY_LAUNCH_FILE_PATH)
        )
    )

name_of_launch_object_2 = IncludeLaunchDescription(
        PythonLaunchDescriptionSource(MY_LAUNCH_FILE_PATH_2)
        )
    )
    
...


return LaunchDescription([
        name_of_launch_object,
        name_of_launch_object_2,

    ])

BASIC STRUCTURE:

#!/usr/bin/python3
# -*- coding: utf-8 -*-
import os

from ament_index_python.packages import get_package_share_directory
from launch import LaunchDescription
from launch.actions import IncludeLaunchDescription
from launch.launch_description_sources import PythonLaunchDescriptionSource

def generate_launch_description():

    pkg_box_bot_gazebo = get_package_share_directory('launch_tests_pkg')

    move_robot = IncludeLaunchDescription(
        PythonLaunchDescriptionSource(
            os.path.join(pkg_box_bot_gazebo, 'launch',
                         'move.launch.py'),
        )
    )

    start_rviz = IncludeLaunchDescription(
        PythonLaunchDescriptionSource(
            os.path.join(pkg_box_bot_gazebo, 'launch', 'start_rviz.launch.py'),
        )
    )

    return LaunchDescription([
        move_robot,
        start_rviz,

    ])

======================================================================================

//-- 2.3 --//
  Declaring args and printing in launch

  import launch
# These log actions are: https://github.com/ros2/launch/blob/master/launch/launch/actions 
# Logging, for example: https://github.com/ros2/launch/blob/master/launch/launch/actions/log_info.py

def generate_launch_description():
    return launch.LaunchDescription([
        launch.actions.DeclareLaunchArgument('extra_msg', default_value='hello world'),
        launch.actions.DeclareLaunchArgument('important_msg'),
        launch.actions.LogInfo(msg=launch.substitutions.LaunchConfiguration('extra_msg')),
        launch.actions.LogInfo(msg=launch.substitutions.LaunchConfiguration('important_msg')),
    ])

//-- 3.3 --//

//-- 4.1 --//

In ROS 2, parameters provide a way to configure and customize nodes at runtime, making your robots more flexible and adaptable to different environments and tasks. Parameters allow you to set values for variables that can affect the behavior of nodes without needing to modify the code itself. This makes it easier to adapt to changing conditions, tune robot behaviors, or adjust configurations across different systems.

In this unit, you will learn how to work with parameters in ROS 2, including how to define, set, get, and update parameters within your nodes. You will also explore the different types of parameters, their usage, and how they help you create more dynamic and reusable robotic applications.

By the end of this unit, you will be able to confidently work with parameters in ROS 2 to improve your robot's flexibility and performance.

//-- 4.4 --//
Parameters

auto param_desc = rcl_interfaces::msg::ParameterDescriptor{};
    param_desc.description = "Sets the velocity (in m/s) of the robot.";
    this->declare_parameter<std::double_t>("velocity", 0.0, param_desc);

after the command: ros2 param list:

/param_vel_node:
  qos_overrides./parameter_events.publisher.depth
  qos_overrides./parameter_events.publisher.durability
  qos_overrides./parameter_events.publisher.history
  qos_overrides./parameter_events.publisher.reliability
  use_sim_time
  velocity

----------------------------------------------------------------------

after ros2 param describe:

user:~/ros2_ws$ ros2 param describe /param_vel_node velocity
Parameter name: velocity
  Type: double
  Description: Sets the velocity (in m/s) of the robot.
  Constraints:

user:~/ros2_ws$ ros2 param
delete    describe  dump      get       list      load      set
user:~/ros2_ws$ ros2 param

