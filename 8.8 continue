//-- 1.1 --//<?xml version="1.0"?>
<robot xmlns:xacro="http://www.ros.org/wiki/xacro" name="my_box_bot">

    <!-- XACRO PROPERTY -->
    <xacro:property name="body_width" value="0.1"/>
    <xacro:property name="body_lenght" value="0.1"/>
    <xacro:property name="body_height" value="0.1"/>

    <xacro:property name="wheel_width" value="0.001"/>
    <xacro:property name="wheel_radius" value="0.035"/>
…
</robot>
Introduction

Unified Robot Description Format

//-- 1.2 --//

//-- 1.4 --// 
Start
//-- 1.5 --//

//-- 1.6 --//

Quiz -> Create Robot Model

//-- 2.5 --//
Topic and TYPE /robot_description. Next, click on the black triangle at the left of Description Topic to view more fields. Set Reliability Policy to Reliable and Durability Policy to Transient Local.

//-- 2.7 --//
And here with two links and a joint, the minimum to start the publishing of TFs.
//-- 2.10 --//
Começar

<visual>
    <origin rpy="0 0 0" xyz="0 0 0.1" />
        <geometry>
            <box size="0.1 0.1 0.1"/>
        </geometry>
        <material name="blue">
            <color rgba="0.006 0.151 0.581 1"/>
        </material>
    </visual>

  Materials.

//-- 2.11 --//

Meshes: Modelo pronto

<link name="head_link">
    <visual>
    <origin rpy="0 0 0" xyz="0 0 0" />
      <geometry>
        <mesh filename="package://urdfbot_description/meshes/urdfbot_head.dae" scale="0.1 0.1 0.1"/>
      </geometry>
    </visual>
  </link>

//-- 2.12 --//

<limit> (required only for revolute and prismatic joint)¶
JOINT:

<joint name="upper_arm_r_link_to_claw_a_r_link_joint" type="revolute">
        <origin xyz="0 0 -0.065" rpy="-1.57 0 -1.57"/> <!-- Com base no parente--> Posição relativa
        <parent link="lower_arm_r_link"/>
        <child link="claw_a_r_link"/>
        <axis xyz="0 0 1"/> 
        <limit effort="100" velocity="1.0" lower="-0.7" upper="0.7"/>

LINK:

<link name="claw_b_r_link">
        <visual>
        <origin rpy="0 0 0" xyz="0 0 0" />
        <geometry>
            <mesh filename="package://urdfbot_description/meshes/urdfbot_claw.dae" scale="0.1 0.1 0.1"/>
        </geometry>
        </visual>
    </link>
    </joint>

MIMIC:
<mimic joint="upper_arm_r_link_to_claw_a_r_link_joint" multiplier="1.0" offset="0.0"/>
offset = tira do eixo em radianos
multiplier, quantas vezes a outra parte vai seguir

<dynamics damping="0.5"/>  <!-- Quanto maior, mais rápido o robô "para" --

<joint name="my_joint" type="revolute">
    <dynamics friction="1.0"/>  <!-- Quanto maior, mais força para mover -->
</joint>

//-- 4.2 --//
Start Gazebo
cd ~/ros2_ws/src
ros2 pkg create --build-type ament_cmake my_box_bot_gazebo --dependencies rclpy gazebo_ros my_box_bot_description
cd my_box_bot_gazebo

TO ORGANIZE:
mkdir models

//-- 4.3 --//
Start
Create Worlds

mkdir worlds
touch worlds/box_bot_empty.world

//-- 4.4 --//
Start

Robotics Physiscs

Collisions, to meshes and geometry

collisions normally are geometrys, in the case of the Box Bot, similar to a box of 0.1³ volume

YOU CAN USE THE OWN MODEL, but demans operacional computing cost

    --- INERTIA ---
        There are three main moments of inertia:

        Ixx: Around the X-axis
        Iyy: Around the Y-axis
        Izz: Around the Z-axis

//-- 5.1 --//

The Joint State Publisher and Differential Drive Plugin, which allow your robot to update and control joint states. Gazebo ROS2 Control 

//-- 5.3 --// 

Publish the values that involve motion: Like wheels.

//-- 5.4 --//

<!-- PLUGINS -->

  <!-- JOINT PUBLISHER -->
  <gazebo>
    <plugin name="box_bot_joint_state" filename="libgazebo_ros_joint_state_publisher.so">
      <ros>
          <remapping>~/out:=joint_states</remapping>
      </ros>
      <update_rate>30</update_rate>

      <joint_name>joint_left_wheel</joint_name>
      <joint_name>joint_right_wheel</joint_name>
      <joint_name>front_yaw_joint</joint_name>
      <joint_name>back_yaw_joint</joint_name>
      <joint_name>front_roll_joint</joint_name>
      <joint_name>back_roll_joint</joint_name>
      <joint_name>front_pitch_joint</joint_name>
      <joint_name>back_pitch_joint</joint_name>
      
    </plugin>
  </gazebo>

  <!-- Differential drive -->
  <gazebo>
    <plugin filename="libgazebo_ros_diff_drive.so" name="differential_drive_controller">

      <!-- wheels -->
      <left_joint>joint_left_wheel</left_joint>
      <right_joint>joint_right_wheel</right_joint>

      <!-- kinematics -->
      <wheel_separation>0.1</wheel_separation>
      <wheel_diameter>0.07</wheel_diameter>

      <!-- limits -->
      <max_wheel_torque>1.0</max_wheel_torque>
      <max_wheel_acceleration>2.0</max_wheel_acceleration>

      <!-- output -->
      <publish_odom>true</publish_odom>
      <publish_odom_tf>true</publish_odom_tf>

      <odometry_frame>odom</odometry_frame>
      <robot_base_frame>base_link</robot_base_frame>

    </plugin>
  </gazebo>

//-- 5.6 --//
Start

<joint name="laser_scan_link_joint" type="prismatic">
        <origin rpy="0 0 0" xyz="0.0 0.0 0.05"/>
        <parent link="chassis"/>
        <child link="laser_scan_link"/>
        <axis xyz="0 0 1"/>
        <limit lower="-0.1" upper="0.0" effort="20.0" velocity="2.0"/>
        <dynamics damping="0.1" friction="1.0"/>
    </joint>
Here

Me explique cada função
Here's a detailed explanation of each part of your prismatic joint in URDF, designed for a laser scanner (like LiDAR) attached to a robot's chassis:

1. <joint name="laser_scan_link_joint" type="prismatic">
name: Identifies the joint as laser_scan_link_joint (useful for debugging/control).

type="prismatic": Specifies a linear sliding joint (moves in a straight line, unlike revolute for rotation).

2. <origin rpy="0 0 0" xyz="0.0 0.0 0.05"/>
xyz="0.0 0.0 0.05": Positions the laser 5 cm above the chassis link along the Z-axis.

rpy="0 0 0": No rotation (Roll=0, Pitch=0, Yaw=0).

3. <parent link="chassis"/> & <child link="laser_scan_link"/>
parent: The joint is attached to the robot's base (chassis).

child: The joint moves the laser_scan_link (where your LiDAR model is defined).

4. <axis xyz="0 0 1"/>
Defines the direction of linear motion:

xyz="0 0 1" → Movement along the Z-axis (up/down).

(Example: xyz="1 0 0" would slide horizontally along the X-axis).

5. <limit lower="-0.1" upper="0.0" effort="20.0" velocity="2.0"/>
lower="-0.1": Joint can slide 10 cm downward from the origin.

upper="0.0": Maximum position is the origin (0 cm).

effort="20.0": Max force the joint can exert (20 Newtons).

velocity="2.0": Max sliding speed (2 m/s).

6. <dynamics damping="0.1" friction="1.0"/>
damping="0.1": Acts like a "shock absorber" to smooth motion.

friction="1.0": Resistance to sliding (higher = harder to move).

PRISMATIC =  TRANSLATION
CONTINUOUS = ANGLEs

<!-- Position Config -->
        <ros2_control name="GazeboSystem" type="system">
        <hardware>
            <plugin>gazebo_ros2_control/GazeboSystem</plugin>
        </hardware>

        <joint name="laser_scan_link_joint">
            <command_interface name="position">
            <param name="min">-0.05</param>
            <param name="max">0.0</param>
            </command_interface>
            <state_interface name="position"/>
            <state_interface name="velocity"/>
            <state_interface name="effort"/>
        </joint>

    </ros2_control>

WE PUT HERE THE LINKS WE WANT CONTROL

//-- 5.8 --//

CONTROL VELOCITY

touch my_box_bot_gazebo/launch/control_position_velocity.launch.py
touch my_box_bot_gazebo/launch/spawn_robot_ros2_control_velocity.launch.xml
touch my_box_bot_description/config/controller_position_velocity.yaml
touch my_box_bot_description/launch/urdf_visualize_control_velocity.launch.py
touch my_box_bot_description/urdf/box_bot_control_complete_velocity.urdf


//-- 6.1 --//
START
FINALMENTE LIDAR, CAMERA, E IMU

//-- 6.2 --//
START Lidar Plugin

//-- 6.5 --//

In this section, we will learn how to add an Inertial Measurement Unit (IMU) sensor to an existing robot URDF file. The IMU sensor provides information about the robot's angular velocity and linear acceleration, which can be useful for various applications such as motion control and localization.

//-- 7.1 XACRO --//

import os
from ament_index_python.packages import get_package_share_directory
from launch import LaunchDescription
from launch.actions import ExecuteProcess, IncludeLaunchDescription
from launch.launch_description_sources import PythonLaunchDescriptionSource
from launch_ros.actions import Node
from ament_index_python.packages import get_package_prefix

import xacro


def generate_launch_description():

    pkg_box_bot_gazebo = get_package_share_directory('my_box_bot_gazebo')
    description_package_name = "my_box_bot_description"
    install_dir = get_package_prefix(description_package_name)

    # This is to find the models inside the models folder in my_box_bot_gazebo package
    gazebo_models_path = os.path.join(pkg_box_bot_gazebo, 'models')
    if 'GAZEBO_MODEL_PATH' in os.environ:
        os.environ['GAZEBO_MODEL_PATH'] = os.environ['GAZEBO_MODEL_PATH'] + \
            ':' + install_dir + '/share' + ':' + gazebo_models_path
    else:
        os.environ['GAZEBO_MODEL_PATH'] = install_dir + \
            "/share" + ':' + gazebo_models_path

    if 'GAZEBO_PLUGIN_PATH' in os.environ:
        os.environ['GAZEBO_PLUGIN_PATH'] = os.environ['GAZEBO_PLUGIN_PATH'] + \
            ':' + install_dir + '/lib'
    else:
        os.environ['GAZEBO_PLUGIN_PATH'] = install_dir + '/lib'

    print("GAZEBO MODELS PATH=="+str(os.environ["GAZEBO_MODEL_PATH"]))
    print("GAZEBO PLUGINS PATH=="+str(os.environ["GAZEBO_PLUGIN_PATH"]))

    gazebo = IncludeLaunchDescription(
        PythonLaunchDescriptionSource([os.path.join(
            get_package_share_directory('gazebo_ros'), 'launch'), '/gazebo.launch.py']),
        launch_arguments={"verbose": "false", 'pause': 'true'}.items(),
    )

    robot_model_path = os.path.join(
        get_package_share_directory('my_box_bot_description'))

    xacro_file = os.path.join(robot_model_path, 'urdf', 'box_bot.xacro')

    # convert XACRO file into URDF
    doc = xacro.parse(open(xacro_file))
    xacro.process_doc(doc)
    params = {'robot_description': doc.toxml()}

    robot_state_publisher = Node(
        package='robot_state_publisher',
        executable='robot_state_publisher',
        output='screen',
        parameters=[params]
    )

    spawn_entity = Node(package='gazebo_ros', executable='spawn_entity.py',
                        arguments=['-entity', 'my_box_bot', '-x', '1.0', '-y', '1.0', '-z', '0.2',
                                   '-topic', 'robot_description'],
                        output='screen')

    return LaunchDescription([
        gazebo,
        robot_state_publisher,
        spawn_entity,
    ])

"COLOCA OS NODES EM VARIAVEIS E COLCOA EM FORMA DE VARIAVEL NO RETURN LAUNCH DESCRIPTION"

//-- 7.5 --//
basicamente variaveis de xacro 
<xacro:property name="body_width" value="0.1"/>
<xacro:property name="body_lenght" value="0.1"/>
<xacro:property name="body_height" value="0.1"/>
<xacro:property name="wheel_width" value="0.001"/>
<xacro:property name="wheel_radius" value="0.035"/>

//-- 7.6 --//

REUSE FUNCTIONS, EXAMPLE WITH WHEEL:

<xacro:macro name="wheel" params="wheel_name">
  <link name="${wheel_name}">   
      <visual>
        <origin rpy="0 1.5707 1.5707" xyz="0 0 0"/>
        <geometry>
          <cylinder length="0.001" radius="0.035"/>
        </geometry>
        <material name="red"/>
      </visual>

      <collision>
        <origin rpy="0 1.5707 1.5707" xyz="0 0 0"/>
        <geometry>
          <cylinder length="${wheel_length}" radius="${wheel_radius}"/>
        </geometry>
      </collision>

      <inertial>
        <origin rpy="0 1.5707 1.5707" xyz="0 0 0"/>
        <mass value="0.05"/>
        <inertia ixx="1.531666666666667e-05" ixy="0" ixz="0" iyy="1.531666666666667e-05" iyz="0" izz="3.0625000000000006e-05"/>
      </inertial>

  </link>

</xacro:macro>

PARA INVOCAR: <xacro:wheel wheel_name="left_wheel"/>

//-- 7.7 --//
XACRO Conditional Blocks
é como se fosse if else, com if unless

<xacro:arg name="indoor_robot" default="true"/>
...
<xacro:if value="${indoor_robot}">
  <gazebo>
    <plugin filename="libgazebo_ros_imu_sensor.so" name="imu_plugin">
  </gazebo>
</xacro:if>
<xacro:unless value="${indoor_robot}">
  <gazebo>
    <plugin filename="libgazebo_ros_gps_sensor.so" name="$gps_plugin">
  </gazebo>
</xacro:unless>

//-- 7.8 --//

<xacro:include filename="$(find my_box_bot_description)/urdf/box_bot.gazebo.xacro" />

BASICAMENTE: dividir um CSS, pra um arquivo xacro não ficar gigante.
//-- 8.8 --// 

MEXENDO NO ON SHAPE
