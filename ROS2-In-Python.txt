** ROS2 IN PYTHON **

/UNIT 2 - ROS 2 BASIC CONCEPTS/

ros2 run <package_name> <executable_file>: RUN PACKAGE
ros2 launch <package_name> <launch_file>: RUN LAUNCH
ros2 pkg create --build-type ament_python mars_rover_systems --dependencies rclpy: CREATE PKG 

ros2 pkg list: Gives you a list of all the ROS packages in your system.

ros2 pkg list | grep mars_rover_systems: Filters the list to show only the package named mars_rover_systems.

** PYTHON STRUCTURE **

rclcpp: ROS2 client library for C++.
rclpy: ROS2 client library for Python.

** SETUP PY: ** 

'console_scripts': [
            'entry_point_name = entry_point_script_path',
            'another_entry_point_name = another_entry_point_script_path',
            ...
            'still_another_entry_point_name = still_another_entry_point_script_path'
        ],

entry_point_script_path: mars_rover_systems.heartbeat:main:

1) This tells ROS2 that we want to go to a folder inside the package named mars_rover_systems. By default when we create a package, a folder with the EXACT SAME NAME as the package is generated inside it.
2) It then specifies which script inside the folder mars_rover_systems we have to look for, in this case heartbeat.py.
3) Within heartbeat.py ( note the use of a : instead of a .) we specify the method to be executed, in this case, the method named main().


** NODE DECLARATION **

node = Node('mars_rover_1') : NODE DECLARATION
node.get_logger().info(f"{i+1}: MARS ROVER 1 IS ALIVE" + str(ros_time_stamp)) : PRINT IN NODE
node.destroy_node() : DESTROY
ros_time_stamp = node.get_clock().now() : GET TIME


** CODE NODE CUSTOM EXAMPLE: **

class HeartbeatNode(Node):
    def __init__(self, rover_name, timer_period=0.2):
        # call super() in the constructor to initialize the Node object
        # the parameter we pass is the node name
        self._rover_name = rover_name
        super().__init__(self._rover_name)
        # create a timer sending two parameters:
        # - the duration between two callbacks (0.2 seconds)
        # - the timer function (timer_callback)
        self.create_timer(timer_period, self.timer_callback)
        
    def timer_callback(self):
        ros_time_stamp = self.get_clock().now()
        self.get_logger().info(self._rover_name +" is alive..."+str(ros_time_stamp))

MAIN:

# initialize the ROS2 communication
    rclpy.init(args=args)
    # declare the node constructor
    node = HeartbeatNode(rover_name="mars_rover_1", timer_period=1.0)
    # keeps the node alive, waits for a request to kill the node (ctrl+c)
    rclpy.spin(node)
    # shutdown the ROS2 communication
    rclpy.shutdown()



* Compiling: *

  1 - cd ~/ros2_ws
  2 - colcon build (colcon build --packages-select <package name>)
  3 - source install/setup.bash

** LAUNCH FILES **:

STRUCTURE:

from launch import LaunchDescription
from launch_ros.actions import Node

def generate_launch_description():
    return LaunchDescription([
        Node(
            package='mars_rover_systems',
            executable='heartbeat_executable', #NAME IN ENTRY POINT
            output='screen'),
        Node(
            package='mars_rover_systems',
            executable='heartbeat_executable2',
            output='screen')
    ])

STEP 3:

We need to configure setup.py to ensure that ROS2 can find and access the .launch.py files in the launch folder.
To achieve this, we need to modify the data_files entry.
This entry specifies the locations where ROS2 can find all the files in our package.
We need to change the default:

We added ONE NEW PATH:
os.path.join('share', package_name), glob('launch/*.launch.py'): which specifies the path to our launch.py files.
This approach can be used for any file or folder that you want your ROS2 packages to include.
At the end, your setup.py should look like this:

from setuptools import find_packages, setup
import os
from glob import glob

package_name = 'mars_rover_systems'

setup(
    name=package_name,
    version='0.0.0',
    packages=find_packages(exclude=['test']),
    data_files=[
        ('share/ament_index/resource_index/packages',
            ['resource/' + package_name]),
        ('share/' + package_name, ['package.xml']),
        (os.path.join('share', package_name), glob('launch/*.launch.py'))
    ],
    install_requires=['setuptools'],
    zip_safe=True,
    maintainer='user',
    maintainer_email='user@todo.todo',
    description='TODO: Package description',
    license='TODO: License declaration',
    tests_require=['pytest'],
    entry_points={
        'console_scripts': [
            'heartbeat_executable = mars_rover_systems.heartbeat:main',
            'heartbeat_executable2 = mars_rover_systems.heartbeat:main2'
        ],
    },
)

TERMINAL: ros2 launch <package> <launch file>

==========================================================================================================================

/UNIT 3 - UNDERSTANDING ROS2 TOPICS/

** TOPICS **:

ros2 topic list: list topics
ros2 topic info: info about topic | PUBLISHER, SUBSCRIBER

EXPLANATION: 
- Type: Refers to what we know as ROS2 interfaces associated with the Topic with which you need to work with. Interfaces define the type of data transmitted through this topic. It could be images, string, laser data or whatever you need to transmit. In this case its Twist which is a kind of message used for moving robots around.

- Publisher count: Refers to the number of nodes that publish data to this topic. In those case there are NONE, which means that nothing is introducing data in this topic.

- Subscription count: Refers to the number of active nodes that read data from this topic. In this case we have TWO because each pair of wheels works independently, one is for the front wheels and the other for the rear wheels.

ros2 interface show <package_name>/msg/<interface_name>: SHOW INFORMATIONS OF THE INTERFACE 

ros2 topic echo <package_name> (--once) if u want once sample

You can visualize the image topics data graphically using this tool, which essentially performs a ROS2 topic echo and uses the image data to display it in a more comprehensible way than just an array of numbers: ros2 run rqt_image_view rqt_image_view /leo/camera/image_raw


******************************************
os2 topic info /cmd_vel --verbose
Type: geometry_msgs/msg/Twist

Publisher count: 0

Subscription count: 2

Node name: four_diff_controller
Node namespace: /
Topic type: geometry_msgs/msg/Twist
Endpoint type: SUBSCRIPTION
GID: 01.0f.6d.87.44.01.6a.6b.01.00.00.00.00.00.8a.04.00.00.00.00.00.00.00.00
QoS profile:
  Reliability: RELIABLE
  History (Depth): UNKNOWN
  Durability: VOLATILE
  Lifespan: Infinite
  Deadline: Infinite
  Liveliness: AUTOMATIC
  Liveliness lease duration: Infinite

Node name: four_diff_controller2
Node namespace: /
Topic type: geometry_msgs/msg/Twist
Endpoint type: SUBSCRIPTION
GID: 01.0f.6d.87.44.01.6a.6b.01.00.00.00.00.00.9c.04.00.00.00.00.00.00.00.00
QoS profile:
  Reliability: RELIABLE
  History (Depth): UNKNOWN
  Durability: VOLATILE
  Lifespan: Infinite
  Deadline: Infinite
  Liveliness: AUTOMATIC
  Liveliness lease duration: Infinite

*******************************************************************************
PROVES THAT /cmd_vel have 2 subscribers: one for front wheels, and other for back wheels



The ros2 interface list command prints a list of all available interfaces.

- End of Notes -
You should find a similar result in the terminal where you ran the command. Looking at what the Terminal shows you, you will see that the interfaces are divided into the following groups:

Messages: Can be found as .msg files. They are simple text files that describe the fields of a ROS message. You can use them to generate source code for messages.

Services: Can be found as .srv files. They are composed of two parts: a request and a response. Both are message declarations.

Actions: Can be found as .action files. They are composed of three parts: a goal, a result, and feedback. Each part contains a message declaration.


PUBLISHING IN A TOPIC: ros2 topic pub <topic_name> <interface_name> <message>
ros2 topic info /cmd_vel (ve quantos publishers e subscribers)

ros2 topic echo /cmd_vel (--once ou nao): consegue ver se ta recebendo algum pub, seja do teleop seja do topico fixo publicado


Here, the publishing node is teleop_twist_keyboard, which is the name of the node launched with the command ros2 run teleop_twist_keyboard teleop_twist_keyboard. (PUB PODE SER POR EXECUTAVEL)

// 3.4 //
PASSO A PASSO CONSTRUÇÃO PACKAGE:

Create a new package to house all the code for this unit.
Following the guidelines from the previous unit, create a package named mars_rover_tasks.
The dependencies for this package should include rclpy, std_msgs, nav_msgs, sensor_msgs, and geometry_msgs, as we will be using elements from these packages throughout the unit.
Set up the launch folder and configure the setup.py.
Create a launch folder inside the mars_rover_tasks package, and configure the setup.py so that launch files with the .launch.py extension are correctly recognized by the ROS2 system.
Create a Python script for the subscriber.
Inside the scripts folder (which should be named mars_rover_tasks by default), create a Python file named subscriber_obstacle_detector.py.

This file should define a custom ROS2 node called ObstacleDetectorNode.
For now, the script should only start the node, print a message confirming the node has started, and then terminate. No additional functionality is required at this point.
Set the entry point for this script as subscriber_obstacle_detector_executable.
Compile only the specific package.
To compile only the mars_rover_tasks package, use the following command:
====================================================================================================================================================================================================

Step1: Create a subscription to a topic inside the ROS2 node class:¶
We want to subscribe to the laser_scan topic.
For that we will use the method self.create_subscription(). Its self because its making reference to the Node class, so its the Node class that gives us the capability of starting a SUBSCRIBER.

For instance, you can see from the output that the Reliability setting is RELIABLE.
This is why you should set the same in your subscriber node:
COLCOAMOS RELIABLE PQ O TOPIC INFO -v É RELIABLE

QoSProfile(depth=10, reliability=ReliabilityPolicy.RELIABLE))
In any case, do not worry too much about these QoS settings right now, as they are a somewhat more advanced concept. If you want to learn more about this topic, you can check out the Understanding QoS unit from the Intermediate ROS2 course.

====================================================================================================================================================================================================

Step2: Create a subscription callback:¶
We define the callback laserscan_callback.
All topic callbacks have as input two elements:
self: contains everything related to the class.
msg: This is where the latest topic message will be stored.
This msg object will have the structure defined in the LaserScan message:

==========================================================================================================================================================================
//-- 3.6 --//

==========================================================================================================================================================================
//-- 3.7 --//

FAZER EXERCICIO 3.3

==========================================================================================================================================================================

//-- 3.8 --// HOW TO CREATE INTERFACES

REMEMBER: To Create a custom interface:¶
To create a new interface, you have to follow the next steps:

Create a new package or use any existing one.
Create a directory named msg inside your package
Inside this directory, create a file named name_of_your_message.msg (more information below)
Modify the CMakeLists.txt file (more information below)
Modify package.xml file (more information below)
Compile and source
Use it in your node

//-- 4.3 --//

//-- 4.4 --//

create_service() method is used to Initialize a ROS2 Service. It has the following inputs, very similarly as Topic Publishers do:
Trigger is the Service interface.
name_service: As in topics, we can name the service in the Service server as we wish, because we are creating it right now.
self.get_status_callback: Is the callback that will be called when we call the service server, using what is called a Service Request.

source ~/ros2_ws/install/setup.bash
ros2 service list | grep /get_robot_status
ros2 service type <name_of_service>
ros2 service call <name_of_service> <name_of_interface> <interface_request_message> : TO CALL A SERVICE

response.message = (
            f"Battery Level: {battery_level}%, "
            f"Temperature: {temperature}°C, "
            f"Camera: {'Operational' if camera_status else 'Faulty'}, "
            f"Motor 1: {'Operational' if motor_statuses[0] else 'Faulty'}, "
            f"Motor 2: {'Operational' if motor_statuses[1] else 'Faulty'}, "
            f"Motor 3: {'Operational' if motor_statuses[2] else 'Faulty'}, "
            f"Motor 4: {'Operational' if motor_statuses[3] else 'Faulty'}, "
        )
CODIGO MASSA EM PYTHON

//-- 4.5 --//

🧠 Classe principal: Node
Você sempre cria suas próprias classes herdando de rclpy.node.Node.

Métodos úteis de Node:
Método	Descrição
create_publisher(msg_type, topic, qos)	Cria um publisher.
create_subscription(msg_type, topic, callback, qos)	Cria um subscriber.
create_timer(timer_period_sec, callback)	Executa uma função periodicamente.
create_service(srv_type, srv_name, callback)	Cria um service server.
create_client(srv_type, srv_name)	Cria um service client.
get_logger()	Retorna o logger do nó para imprimir mensagens.
declare_parameter(name, default_value)	Declara um parâmetro do nó.
get_parameter(name).value	Obtém o valor de um parâmetro declarado.


🔧 Funções essenciais do rclpy
Função	Descrição
rclpy.init()	Inicializa o sistema ROS 2. Deve ser chamada antes de qualquer outra função ROS.
rclpy.spin(node)	Mantém o nó ativo, ouvindo e processando callbacks.
rclpy.shutdown()	Finaliza o sistema ROS 2 com segurança.

//-- 4.10 --//

//-- 5.0 --// CALL BACKS

//-- 5.2 --//
CMake Done

//-- 5.3 --//
CALL BACKS IN ROS2
Priorizar nomear todas as funções, e fazer uma classe que execute tudo.

//-- 5.4 --//

function: create_timer(period, callback_function) "de quanto em quanto tempo se executa"

//-- 5.5 --//
Prática de callback functions
Elas tem heredietariedade, dependendo do create_counter elas se ordenam em FIFO (First In First Out)

//-- 6.1 --//
ENTENDER THREADINGS, NÃO FAZER O ROBÔ CRASHAR E QUE ELE OPERE COM TODOS OS CALL BACKS NORMALMENTE

//-- 6.4 --//
Why do we need to call back groups?

//-- 7.2 --//

Actions X Services
- you can cancel actions while it is being executed
- while its being executed, it prints information to the client

Action server node: contains the action actions
Action client node: receives the server and execute

n summarizing, the workflow goes like this:

The Client sends a goal to the Server. This will trigger the "start" of the Action.
The Server sends feedback to the Client while the Action is taking place.
Once the Action finishes, the Server returns a response to the Client.

ros2 action list
ros2 action info

ros2 action send_goal <action_name> <action_type> <values>

WITH FEEDBACK: ros2 action send_goal /rotate leo_description/action/Rotate "{rotation_time: 5.0}" -f

Divide-se em: GOAL/ RESULT/ FEEDBACK
goal: Consists of a variable called rotation_time of type float64.

result: Consists of a variable called success, which is of type bool.

feedback: Consists of a variable called elapsed_time of type float64.

//-- 7.6 --//
Começar action server

//-- 7.11 --//
Conclued Actions

//-- 8.2 --//
DEBUG: Detailed information, typically useful only during development.
INFO: General information about the node’s operations.
WARN: Indications that something unexpected happened, or might happen soon.
ERROR: Errors that have occurred but are not necessarily fatal to the node.
FATAL: Severe errors that will likely cause the node to terminate.

BASIC ROS NODE:

from launch import LaunchDescription
from launch_ros.actions import Node

def generate_launch_description():
    return LaunchDescription([
        Node(
            package='logs_test',
            executable='logger_example',
            emulate_tty=True,
            output='screen'
        )
    ])

- You can separate LOG levels to get only the necessary information.

//-- 8.3 --//

DEBUG WITH RVIZ
rviz2 in terminal
END IN TOPIC 3.

//-- 8.5 --// 
Como me localizar sobre os topics, e qual os services, nodes?

ros2 doctor
package: ros2cli

This is the general structure of a UserWarning looks like:

<path>: <line>: UserWarning: <message>

//-- 9.1 --//

What next?
-> ROS2 in C++
