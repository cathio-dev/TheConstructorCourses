//-- 1.1 --//
Introduction

Unified Robot Description Format

//-- 1.2 --//

//-- 1.4 --// 
Start
//-- 1.5 --//

//-- 1.6 --//

Quiz -> Create Robot Model

//-- 2.5 --//
Topic and TYPE /robot_description. Next, click on the black triangle at the left of Description Topic to view more fields. Set Reliability Policy to Reliable and Durability Policy to Transient Local.

//-- 2.7 --//
And here with two links and a joint, the minimum to start the publishing of TFs.
//-- 2.10 --//
Começar

<visual>
    <origin rpy="0 0 0" xyz="0 0 0.1" />
        <geometry>
            <box size="0.1 0.1 0.1"/>
        </geometry>
        <material name="blue">
            <color rgba="0.006 0.151 0.581 1"/>
        </material>
    </visual>

  Materials.

//-- 2.11 --//

Meshes: Modelo pronto

<link name="head_link">
    <visual>
    <origin rpy="0 0 0" xyz="0 0 0" />
      <geometry>
        <mesh filename="package://urdfbot_description/meshes/urdfbot_head.dae" scale="0.1 0.1 0.1"/>
      </geometry>
    </visual>
  </link>

//-- 2.12 --//

<limit> (required only for revolute and prismatic joint)¶
JOINT:

<joint name="upper_arm_r_link_to_claw_a_r_link_joint" type="revolute">
        <origin xyz="0 0 -0.065" rpy="-1.57 0 -1.57"/> <!-- Com base no parente--> Posição relativa
        <parent link="lower_arm_r_link"/>
        <child link="claw_a_r_link"/>
        <axis xyz="0 0 1"/> 
        <limit effort="100" velocity="1.0" lower="-0.7" upper="0.7"/>

LINK:

<link name="claw_b_r_link">
        <visual>
        <origin rpy="0 0 0" xyz="0 0 0" />
        <geometry>
            <mesh filename="package://urdfbot_description/meshes/urdfbot_claw.dae" scale="0.1 0.1 0.1"/>
        </geometry>
        </visual>
    </link>
    </joint>

MIMIC:
<mimic joint="upper_arm_r_link_to_claw_a_r_link_joint" multiplier="1.0" offset="0.0"/>
offset = tira do eixo em radianos
multiplier, quantas vezes a outra parte vai seguir

<dynamics damping="0.5"/>  <!-- Quanto maior, mais rápido o robô "para" --

<joint name="my_joint" type="revolute">
    <dynamics friction="1.0"/>  <!-- Quanto maior, mais força para mover -->
</joint>

//-- 4.2 --//
Start Gazebo
cd ~/ros2_ws/src
ros2 pkg create --build-type ament_cmake my_box_bot_gazebo --dependencies rclpy gazebo_ros my_box_bot_description
cd my_box_bot_gazebo

TO ORGANIZE:
mkdir models

//-- 4.3 --//
Start
Create Worlds

mkdir worlds
touch worlds/box_bot_empty.world

//-- 4.4 --//
Start

Robotics Physiscs

Collisions, to meshes and geometry

collisions normally are geometrys, in the case of the Box Bot, similar to a box of 0.1³ volume

YOU CAN USE THE OWN MODEL, but demans operacional computing cost

    --- INERTIA ---
        There are three main moments of inertia:

        Ixx: Around the X-axis
        Iyy: Around the Y-axis
        Izz: Around the Z-axis

//-- 5.1 --//

The Joint State Publisher and Differential Drive Plugin, which allow your robot to update and control joint states. Gazebo ROS2 Control 

//-- 5.3 --// 

Publish the values that involve motion: Like wheels.

//-- 5.4 --//

<!-- PLUGINS -->

  <!-- JOINT PUBLISHER -->
  <gazebo>
    <plugin name="box_bot_joint_state" filename="libgazebo_ros_joint_state_publisher.so">
      <ros>
          <remapping>~/out:=joint_states</remapping>
      </ros>
      <update_rate>30</update_rate>

      <joint_name>joint_left_wheel</joint_name>
      <joint_name>joint_right_wheel</joint_name>
      <joint_name>front_yaw_joint</joint_name>
      <joint_name>back_yaw_joint</joint_name>
      <joint_name>front_roll_joint</joint_name>
      <joint_name>back_roll_joint</joint_name>
      <joint_name>front_pitch_joint</joint_name>
      <joint_name>back_pitch_joint</joint_name>
      
    </plugin>
  </gazebo>

  <!-- Differential drive -->
  <gazebo>
    <plugin filename="libgazebo_ros_diff_drive.so" name="differential_drive_controller">

      <!-- wheels -->
      <left_joint>joint_left_wheel</left_joint>
      <right_joint>joint_right_wheel</right_joint>

      <!-- kinematics -->
      <wheel_separation>0.1</wheel_separation>
      <wheel_diameter>0.07</wheel_diameter>

      <!-- limits -->
      <max_wheel_torque>1.0</max_wheel_torque>
      <max_wheel_acceleration>2.0</max_wheel_acceleration>

      <!-- output -->
      <publish_odom>true</publish_odom>
      <publish_odom_tf>true</publish_odom_tf>

      <odometry_frame>odom</odometry_frame>
      <robot_base_frame>base_link</robot_base_frame>

    </plugin>
  </gazebo>

//-- 5.6 --//
Start
