//-- 1.1 --//
  Introduction: Transform Library in ROS2

//-- 1.3 --//
  Transforms -> arrow that connect a frame to another with reference

//-- 1.6 --// 
  Creating a frame with another: ros2 run tf2_ros static_transform_publisher --x 0 --y 4.0 --z 0 --roll 0 --pitch 0 --yaw 0 --frame-id deepmind_robot1_odom --child-frame-id rock

//-- 2.1 --//
  2.1 START

//-- 2.4 --//
View TF's with pdf: ros2 run tf2_tools view_frames

//-- 2.5 --//
With ros2 rn rqt_tf_tree rqt_tf_tree
Now, this TF is not static, but it can be refreshed to show the current status of the TF tree. Press the refresh button each time you want the latest update.

//-- 2.6 --//
The tf2_echo command has to be run with the following general structure:

ros2 run tf2_ros tf2_echo [reference_frame] [target_frame]
In this scheme:

[reference_frame] is where you start the transform, for instance rgb_camera_link_frame.

[target_frame] is where you want to finish the transform, for instance, turtle_chassis.

This means you want to know the translation and rotation from the reference_frame to the target_frame.

//-- 2.7 --//

Using TF frame of turtle, and put cambot to follow the turtle

Viewing TF Frames in RVIZ

//-- 2.8 --//
  Real Robot Project (No Time) - fiz a parte 1

//-- 3.4 --//
GO BACK TO 35 MIN PRATICE

tf2_monitor: used to check the delay between TF's  

//-- 3.6 --//
Static transforms using the command line

//RPY
ros2 run tf2_ros static_transform_publisher --x x --y y --z z --yaw yaw --pitch pitch --roll roll --frame-id frame_id --child-frame-id child_frame_id

// XYZW Quaternion
ros2 run tf2_ros static_transform_publisher --x x --y y --z z --qx qx --qy qy --qz qz --qw qw --frame-id frame_id --child-frame-id child_frame_id

//-- 4.3 --// Robot State Publisher

Publishes the TF and the description of the robot, very important
To put in Gazebo and RVIZ

