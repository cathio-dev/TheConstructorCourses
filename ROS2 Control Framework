//-- 1.1 --//

Ros2 control

ROS 2 Control is a powerful framework for managing robotic hardware and controllers in ROS 2, enabling precise and flexible control of robots in both simulation and real-world applications. This course provides a structured approach to learning ros2_control, from setting up controllers to creating custom hardware interfaces and controllers.

//-- 1.2 --//

This is where the term control comes into play. Control means managing, commanding, or directing the behavior of a device, or a system of devices, to get expected results. A whole field of study called Control Theory is dedicated to studying and solving control problems.

//-- 2.2 --// START

//-- 2.3 --//

To add ros2_control to our robot we will go through the following steps:

Create a new package
Create a configuration file for the controller manager and the control algorithms
Update the robot's description xacro file
Create a launch file that will bring up the controllers
Test the robot controlled by ros2_control

//-- 2.4 --//

//-- 2.5 --//

Important: the joint names that you define in this configuration file must match the joint names in the URDF/XACRO file. The YAML file above for instance, assigns a joint with name "joint1" to both controllers. "joint1" corresponds to the joint name defined by the XML tag <joint name="joint1" type="continuous"> inside the .xacro file (more on that below!).

//-- 2.6 --//

Updating the xacrofile with the hardware interface and joint parameters

//-- 2.7 --//

Config ready, URDF updated, lets create a Launch File

    robot_state_pub_node = Node(
        package="robot_state_publisher",
        executable="robot_state_publisher",
        output="both",
        parameters=[robot_description],
    )

Here we generate a robot_state_publisher node providing the robot_description variable as parameter. This node listens to the /joint_states topic from the joint_state_broadcaster and provides an ongoing view of the robot joint locations through the tf and tf_static topics.

    joint_state_broadcaster_spawner = Node(
        package="controller_manager",
        executable="spawner",
        arguments=["joint_state_broadcaster",
                   "--controller-manager", "/controller_manager"],
    )

Here we leverage a python script called spawner, which is provided by the controller_manager package, in order to load and start the joint_state_broadcaster.
The joint_state_broadcaster publishes the state of the robot on the topics "/rrbot_controller/state" and "/joint_states". The robot state, described by the position, velocity and effort of every robot joint, is transmitted as an "sensor_msgs/ JointState" ROS2 message, that can be read by any ROS2 node.


//-- 2.9 --//

HANDS ON PRACTICE
